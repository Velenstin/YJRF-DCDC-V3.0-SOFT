; Asm codes generated by Shanghai Haier C Compiler
; HRCO, Ver: 1.0,0137

#INCLUDE       	<ES7P0693.INC>
#INCLUDE       	<OPERATION.INC>
	PUBLIC         	_#T0
	EXTERN         	MUL_TEMP
	EXTERN         	MUL_TEMP
	EXTERN         	_memchr_c
	EXTERN         	_memchr_cDATA
	EXTERN         	_memchr
	EXTERN         	_memchrDATA
	EXTERN         	_memcmp_c
	EXTERN         	_memcmp_cDATA
	EXTERN         	_memcmp
	EXTERN         	_memcmpDATA
	EXTERN         	_memcpy_c
	EXTERN         	_memcpy_cDATA
	EXTERN         	_memcpy
	EXTERN         	_memcpyDATA
	EXTERN         	_memmove_c
	EXTERN         	_memmove_cDATA
	EXTERN         	_memmove
	EXTERN         	_memmoveDATA
	EXTERN         	_memset
	EXTERN         	_memsetDATA
	EXTERN         	_strcat_c
	EXTERN         	_strcat_cDATA
	EXTERN         	_strcat
	EXTERN         	_strcatDATA
	EXTERN         	_strchr_c
	EXTERN         	_strchr_cDATA
	EXTERN         	_strchr
	EXTERN         	_strchrDATA
	EXTERN         	_strcmp_c
	EXTERN         	_strcmp_cDATA
	EXTERN         	_strcmp
	EXTERN         	_strcmpDATA
	EXTERN         	_strcpy_c
	EXTERN         	_strcpy_cDATA
	EXTERN         	_strcpy
	EXTERN         	_strcpyDATA
	EXTERN         	_strichr_c
	EXTERN         	_strichr_cDATA
	EXTERN         	_strichr
	EXTERN         	_strichrDATA
	EXTERN         	_stricmp_c
	EXTERN         	_stricmp_cDATA
	EXTERN         	_stricmp
	EXTERN         	_stricmpDATA
	EXTERN         	_strlen_c
	EXTERN         	_strlen_cDATA
	EXTERN         	_strlen
	EXTERN         	_strlenDATA
	EXTERN         	_strncat_c
	EXTERN         	_strncat_cDATA
	EXTERN         	_strncat
	EXTERN         	_strncatDATA
	EXTERN         	_strncpy_c
	EXTERN         	_strncpy_cDATA
	EXTERN         	_strncpy
	EXTERN         	_strncpyDATA
	EXTERN         	_GPIOInit
	EXTERN         	_hw2000b_port_init
	EXTERN         	_hw2000b_init_1m
	EXTERN         	_hw2000b_init_250k
	EXTERN         	_hw2000b_set_osc_16M
	EXTERN         	_hw2000b_set_power_max
	EXTERN         	_hw2000b_set_power_5
	EXTERN         	_hw2000b_set_power_0
	EXTERN         	_hw2000b_set_power_negative_10
	EXTERN         	_hw2000b_set_power_negative_20
	EXTERN         	_hw2000b_set_frequence_2403
	EXTERN         	_hw2000b_set_frequence_2420
	EXTERN         	_hw2000b_set_frequence_2450
	EXTERN         	_hw2000b_set_frequence_2460
	EXTERN         	_hw2000b_set_frequence_2483
	EXTERN         	_hw2000b_power_test
	EXTERN         	_hw2000b_cancel_sw
	EXTERN         	_hw2000b_tx_data
	EXTERN         	_hw2000b_tx_dataDATA
	EXTERN         	_hw2000b_rx_enable
	EXTERN         	_hw2000b_rx_data
	EXTERN         	_hw2000b_rx_dataDATA
	EXTERN         	_hw2000b_power_down
	EXTERN         	_hw2000b_power_on
	EXTERN         	_delay_ms
	EXTERN         	_delay_msDATA
	EXTERN         	_delay_us
	EXTERN         	_delay_usDATA
	EXTERN         	_ram_clear
	EXTERN         	_mmemset
	EXTERN         	_mmemsetDATA
	EXTERN         	_mmemcpy
	EXTERN         	_mmemcpyDATA
	EXTERN         	_spi_init
	EXTERN         	_hw2000b_write_reg
	EXTERN         	_hw2000b_write_regDATA
	EXTERN         	_hw2000b_read_reg
	EXTERN         	_hw2000b_read_regDATA
	EXTERN         	_hw2000b_write_fifo
	EXTERN         	_hw2000b_write_fifoDATA
	EXTERN         	_hw2000b_read_fifo
	EXTERN         	_hw2000b_read_fifoDATA
	PUBLIC         	__ack_count
	PUBLIC         	__hw2000b_irq_request
	PUBLIC         	_rx_ok
	PUBLIC         	_data_rf
	PUBLIC         	_rxbuf
	PUBLIC         	_rxbuf_cnt
	PUBLIC         	_rxbuf_crc
	PUBLIC         	_WDT_Init
	PUBLIC         	_UART_Init
	PUBLIC         	_main
	PUBLIC         	_isr
_main_i_65	EQU            	_mainDATA + 0X0		; Bank 0
_main_reg_65	EQU            	_mainDATA + 0X1		; Bank 0
_main_#T20517_70	EQU            	_mainDATA + 0X1		; Bank 0
_main_#T20518_70	EQU            	_mainDATA + 0X3		; Bank 0
#TMP	EQU            	?_TMP+ 0X0		; Bank 0
?_TMP_RET	EQU            	?_TMP		; Bank 0
_RX0TXEN_0#sh	EQU            	0X684		; Bank 0
_RX0LEN_0#sh	EQU            	0X686		; Bank 0
_TRMT0_0#sh	EQU            	0X691		; Bank 0
_BRGH0_0#sh	EQU            	0X695		; Bank 0
_TX0LEN_0#sh	EQU            	0X696		; Bank 0
_TX0EN_0#sh	EQU            	0X697		; Bank 0
_TX0B_0#sh	EQU            	0XD1		; Bank 0
_BR0R_0#sh	EQU            	0XD3		; Bank 0
_MULA_0#sh	EQU            	(MULA - 0X6080) % 0X40 + 0xC0		; Bank 0
_MULB_0#sh	EQU            	(MULB - 0X6080) % 0X40 + 0xC0		; Bank 0
_MULL_0#sh	EQU            	(MULL - 0X6080) % 0X40 + 0xC0		; Bank 0
_MULH_0#sh	EQU            	(MULH - 0X6080) % 0X40 + 0xC0		; Bank 0
_DIVEL_0#sh	EQU            	(DIVEL - 0X6080) % 0X40 + 0xC0		; Bank 0
_DIVEM_0#sh	EQU            	(DIVEM - 0X6080) % 0X40 + 0xC0		; Bank 0
_DIVSL_0#sh	EQU            	(DIVSL - 0X6080) % 0X40 + 0xC0		; Bank 0
_DIVSH_0#sh	EQU            	(DIVSH - 0X6080) % 0X40 + 0xC0		; Bank 0
_DIVQL_0#sh	EQU            	(DIVQL - 0X6080) % 0X40 + 0xC0		; Bank 0
_DIVQM_0#sh	EQU            	(DIVQM - 0X6080) % 0X40 + 0xC0		; Bank 0
_DIVRL_0#sh	EQU            	(DIVRL - 0X6080) % 0X40 + 0xC0		; Bank 0
_DIVRH_0#sh	EQU            	(DIVRH - 0X6080) % 0X40 + 0xC0		; Bank 0
_DIVC_0#sh	EQU            	(DIVC - 0X6080) % 0X40 + 0xC0		; Bank 0
_DIVEU_0#sh	EQU            	(DIVEU - 0X6080) % 0X40 + 0xC0		; Bank 0
_DIVEH_0#sh	EQU            	(DIVEH - 0X6080) % 0X40 + 0xC0		; Bank 0
_FRAH_0#sh	EQU            	(FRAH - 0X6080) % 0X40 + 0xC0		; Bank 0
_FRAL_0#sh	EQU            	(FRAL - 0X6080) % 0X40 + 0xC0		; Bank 0
	_DESC          	WDT_Init,0X0,0X0
WDT_Init#	CSEG           
_WDT_Init
; /**************************************************************************
; * 版权声明：Copyright@2019 上海东软载波微电子有限公司
; * 文件名称：main.c
; * 功能描述：
; * 函数列表：
; * 文件作者：Ljj  
; * 文件版本：
; * 完成日期：2023-08-23
; * 修订历史：
; * 修订日期：
; **************************************************************************/
; #include <hic.h>
; #include "string.h" 
; #include "io.h"
; #include "hw2000b.h"
; #include "timer.h"
; #include "ram.h"
; #include "spi.h"
; #define CLRWDT()   {__Asm CWDT;}        //宏定义清狗指令
; uint16_t	_ack_count;
; sbit		_hw2000b_irq_request;	//射频中断标志
; sbit		rx_ok;
; uint8_t data_rf[30];	
; uint8_t rxbuf[30];
; uint8_t rxbuf_cnt;
; uint8_t rxbuf_crc;
; void WDT_Init(void)
; {
#line 34	D:\毕业论文\ES_DEV_ES7W8020_SDK_YJ_FB_V4_20231013\src\main.c ;     WDTC = 0x16;         //分频比1:128，使能WDT预分频器，看门狗溢出时间t=256*128/32000=1.024s
	CLR            	BKSR
;   34:(    ASGN_1,         22 ,            ,      WDTC)

; ITemplate_ASGN1_4_R
	MOVI           	0x16
	MOVA           	_WDTC_0
#line 35	D:\毕业论文\ES_DEV_ES7W8020_SDK_YJ_FB_V4_20231013\src\main.c ;     PWEN &= 0xFD;
;   35:(   ASGN_B$,          0 ,          1 ,      PWEN)

; ITemplate_CLR_B1_TMP
	BCC            	_PWEN_0,	0x1
;     PWEN |= 0<<1;		//禁止IDLE状态下计数
#line 37	D:\毕业论文\ES_DEV_ES7W8020_SDK_YJ_FB_V4_20231013\src\main.c ; }
;   37:(       RET,            ,            ,          )

; ITemplate_RET
	RET            			; Bank 0		; ShBank 0
	_DESC          	UART_Init,0X0,0X0
UART_Init#	CSEG           
_UART_Init
; void UART_Init(void)
; {
#line 42	D:\毕业论文\ES_DEV_ES7W8020_SDK_YJ_FB_V4_20231013\src\main.c ;     RX0LEN = 0;     //8位数据接收格式
	CLR            	BKSR
;   42:(    ASGN_0,          0 ,            ,    RX0LEN)

; ITemplate_CLR_0_TMP
	BSS            	BKSR,	0x4
	BCC            	(_RX0LEN_0#sh)/8,	(_RX0LEN_0#sh)%8		; ShBank 1
#line 43	D:\毕业论文\ES_DEV_ES7W8020_SDK_YJ_FB_V4_20231013\src\main.c ;     TX0LEN = 0;     //8位数据发送格式
;   43:(    ASGN_0,          0 ,            ,    TX0LEN)

; ITemplate_CLR_0_TMP
	BCC            	(_TX0LEN_0#sh)/8,	(_TX0LEN_0#sh)%8		; ShBank 1
; 	//BJT0EN = 1;		//波特率去抖使能
;     //BRGH0 = 0;		//波特率低速模式：波特率=Fosc/(64*BRRDIV))
;     //BR0R = 0xD0;		//波特率整数部分=16MHz/(64*1200bps)=208.3333
; 	//BR0FRA = 0x05;	//波特率小数部分=16*0.3333 ≈ 5
;     //BRGH0 = 0;      //波特率低速模式：波特率=Fosc/(64*(BRR<7:0>+1))
;     //BR0R = 0x19;    //波特率=16MHz/(64*(25+1))≈9600bps
#line 52	D:\毕业论文\ES_DEV_ES7W8020_SDK_YJ_FB_V4_20231013\src\main.c ;     BRGH0 = 0;		//波特率低速模式：波特率=Fosc/(64*(BRR<7:0>+1))
;   52:(    ASGN_0,          0 ,            ,     BRGH0)

; ITemplate_CLR_0_TMP
	BCC            	(_BRGH0_0#sh)/8,	(_BRGH0_0#sh)%8		; ShBank 1
#line 53	D:\毕业论文\ES_DEV_ES7W8020_SDK_YJ_FB_V4_20231013\src\main.c ;     BR0R = 0x33;	//波特率=16MHz/(64*(51+1))≈4800bps
;   53:(    ASGN_1,         51 ,            ,      BR0R)

; ITemplate_ASGN1_4_R
	MOVI           	0x33
	MOVA           	_BR0R_0#sh		; ShBank 1
#line 55	D:\毕业论文\ES_DEV_ES7W8020_SDK_YJ_FB_V4_20231013\src\main.c ; 	RX0TXEN = 0;		//串口管脚交互
;   55:(    ASGN_0,          0 ,            ,   RX0TXEN)

; ITemplate_CLR_0_TMP
	BCC            	(_RX0TXEN_0#sh)/8,	(_RX0TXEN_0#sh)%8		; ShBank 1
; 	//RX0IE = 1;		//接收中断
; 	//RX0EN = 1;        //打开串口接收
#line 60	D:\毕业论文\ES_DEV_ES7W8020_SDK_YJ_FB_V4_20231013\src\main.c ; 	TX0EN = 1;			//打开串口发送
;   60:(    ASGN_0,          1 ,            ,     TX0EN)

; ITemplate_SET_0_TMP
	BSS            	(_TX0EN_0#sh)/8,	(_TX0EN_0#sh)%8		; ShBank 1
#line 61	D:\毕业论文\ES_DEV_ES7W8020_SDK_YJ_FB_V4_20231013\src\main.c ; }
;   61:(       RET,            ,            ,          )

; ITemplate_RET
	BCC            	BKSR,	0x4
	RET            			; Bank 0		; ShBank 0
	_DESC          	main,0X2,0X0,GPIOInit,WDT_Init,UART_Init,spi_init,hw2000b_port_init,hw2000b_init_250k,hw2000b_write_reg,delay_us,hw2000b_read_reg,hw2000b_read_fifo

SECTION1main	UNINTIAL       	0		; Bank 0
	ORG            	0X80		; Bank 0
_mainDATA	RSEG           	0X5		; Bank 0
main#	CSEG           
_main
; /**************************************************************************
; * 函数名称：main
; * 功能描述：工程入口
; * 输入参数：无
; * 返回参数：无
; * 函数作者：
; * 完成日期：
; * 修订历史：
; * 修订日期：
; **************************************************************************/
; void main(void) 
; {
; 	uint8_t i;
; 	uint8_t data_buf;
; 	uint16_t reg;
#line 81	D:\毕业论文\ES_DEV_ES7W8020_SDK_YJ_FB_V4_20231013\src\main.c ;     GPIOInit();										//初始化GPIO
	CLR            	BKSR
;   81:(      CALL, (GPIOInit.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_GPIOInit
	CALL           	_GPIOInit		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 82	D:\毕业论文\ES_DEV_ES7W8020_SDK_YJ_FB_V4_20231013\src\main.c ; 	WDT_Init();										//初始化看门狗
;   82:(      CALL, (WDT_Init.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_WDT_Init
	CALL           	_WDT_Init		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 83	D:\毕业论文\ES_DEV_ES7W8020_SDK_YJ_FB_V4_20231013\src\main.c ; 	UART_Init();									//初始化串口
;   83:(      CALL, (UART_Init.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_UART_Init
	CALL           	_UART_Init		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 85	D:\毕业论文\ES_DEV_ES7W8020_SDK_YJ_FB_V4_20231013\src\main.c ; 	spi_init();										//初始化SPI端口
;   85:(      CALL, (spi_init.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_spi_init
	CALL           	_spi_init		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 86	D:\毕业论文\ES_DEV_ES7W8020_SDK_YJ_FB_V4_20231013\src\main.c ; 	hw2000b_port_init();							//初始化射频端口
;   86:(      CALL, (hw2000b_port_init.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_hw2000b_port_init
	CALL           	_hw2000b_port_init		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 87	D:\毕业论文\ES_DEV_ES7W8020_SDK_YJ_FB_V4_20231013\src\main.c ; 	hw2000b_init_250k();							//初始化射频参数
;   87:(      CALL, (hw2000b_init_250k.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_hw2000b_init_250k
	CALL           	_hw2000b_init_250k		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 89	D:\毕业论文\ES_DEV_ES7W8020_SDK_YJ_FB_V4_20231013\src\main.c ; 	GIE = 1;										//全局中断使能
;   89:(    ASGN_0,          1 ,            ,       GIE)

; ITemplate_SET_0_TMP
	BSS            	(_GIE_0)/8,	(_GIE_0)%8
#line 91	D:\毕业论文\ES_DEV_ES7W8020_SDK_YJ_FB_V4_20231013\src\main.c ; 	while(1) 
;   91:(     LABEL,    #L20371 ,            ,          )

; ITemplate_LABEL
#L20371
; 	{
#line 93	D:\毕业论文\ES_DEV_ES7W8020_SDK_YJ_FB_V4_20231013\src\main.c ; 		_hw2000b_irq_request = 0;					//清中断标志位
;   93:(    ASGN_0,          0 ,            ,_hw2000b_irq_request)

; ITemplate_CLR_0_TMP
	BCC            	((__hw2000b_irq_request)/8) & 0X7F,	(__hw2000b_irq_request)%8		; Bank 0
#line 94	D:\毕业论文\ES_DEV_ES7W8020_SDK_YJ_FB_V4_20231013\src\main.c ; 		hw2000b_write_reg(0x36, 0x0080);			//FIFO0 enable
;   94:(    PARA_1,         54 ,            ,      addr)

; ITemplate_ASGN1_4
	MOVI           	0x36
	MOVAR          	_hw2000b_write_regDATA+0X0		; Bank 1
;   94:(    PARA_2,        128 ,            ,     value)

; ITemplate_ASGN1_4
	MOVI           	0x80
	MOVAR          	_hw2000b_write_regDATA+0X1		; Bank 1
	MOVI           	0x0
	MOVAR          	_hw2000b_write_regDATA+0X1+0x1		; Bank 1
;   94:(      CALL, (hw2000b_write_reg.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_hw2000b_write_reg
	CALL           	_hw2000b_write_reg		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 95	D:\毕业论文\ES_DEV_ES7W8020_SDK_YJ_FB_V4_20231013\src\main.c ; 		hw2000b_write_reg(0x37, 0x0000);			//FIFO1 disable
;   95:(    PARA_1,         55 ,            ,      addr)

; ITemplate_ASGN1_4
	MOVI           	0x37
	MOVAR          	_hw2000b_write_regDATA+0X0		; Bank 1
;   95:(    PARA_2,          0 ,            ,     value)

; ITemplate_ASGN1_4
	MOVI           	0x0
	MOVAR          	_hw2000b_write_regDATA+0X1		; Bank 1
	MOVI           	0x0
	MOVAR          	_hw2000b_write_regDATA+0X1+0x1		; Bank 1
;   95:(      CALL, (hw2000b_write_reg.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_hw2000b_write_reg
	CALL           	_hw2000b_write_reg		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 96	D:\毕业论文\ES_DEV_ES7W8020_SDK_YJ_FB_V4_20231013\src\main.c ; 		hw2000b_write_reg(0x21, 0x0080);			//RX enable 
;   96:(    PARA_1,         33 ,            ,      addr)

; ITemplate_ASGN1_4
	MOVI           	0x21
	MOVAR          	_hw2000b_write_regDATA+0X0		; Bank 1
;   96:(    PARA_2,        128 ,            ,     value)

; ITemplate_ASGN1_4
	MOVI           	0x80
	MOVAR          	_hw2000b_write_regDATA+0X1		; Bank 1
	MOVI           	0x0
	MOVAR          	_hw2000b_write_regDATA+0X1+0x1		; Bank 1
;   96:(      CALL, (hw2000b_write_reg.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_hw2000b_write_reg
	CALL           	_hw2000b_write_reg		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 98	D:\毕业论文\ES_DEV_ES7W8020_SDK_YJ_FB_V4_20231013\src\main.c ; 		while (!_hw2000b_irq_request)				//等待RF接收中断标志位
;   98:(     LABEL,    #L20404 ,            ,          )

; ITemplate_LABEL
#L20404
;   98:(     JNZ_0, _hw2000b_irq_request ,            ,   #L20406)

; ITemplate_JNZ_0
	JBC            	((__hw2000b_irq_request)/8) & 0X7F,	(__hw2000b_irq_request)%8		; Bank 0
	GOTO           	#L20406
; 		{
#line 100	D:\毕业论文\ES_DEV_ES7W8020_SDK_YJ_FB_V4_20231013\src\main.c ; 			CLRWDT();								//清看门狗
; ITemplate_LABEL
;-----------Embedded Asm--------------
	CWDT
;-------------------------------------
#line 101	D:\毕业论文\ES_DEV_ES7W8020_SDK_YJ_FB_V4_20231013\src\main.c ; 			delay_us(50);							//延时
;  101:(    PARA_2,         50 ,            ,     delay)

; ITemplate_ASGN1_4
	MOVI           	0x32
	SECTION        	0x1
	MOVA           	(_delay_usDATA+0X0) & 0X7F		; Bank 1
	MOVI           	0x0
	MOVA           	(_delay_usDATA+0X0+0x1) & 0X7F		; Bank 1
;  101:(      CALL, (delay_us.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_delay_us
	CALL           	_delay_us		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 102	D:\毕业论文\ES_DEV_ES7W8020_SDK_YJ_FB_V4_20231013\src\main.c ; 		}
;  102:(       JMP,            ,            ,   #L20404)

; ITemplate_JMP
	GOTO           	#L20404
;  102:(     LABEL,    #L20406 ,            ,          )

; ITemplate_LABEL
#L20406
#line 104	D:\毕业论文\ES_DEV_ES7W8020_SDK_YJ_FB_V4_20231013\src\main.c ; 		reg = hw2000b_read_reg(0x36);				//读取状态寄存器
;  104:(    PARA_1,         54 ,            ,      addr)

; ITemplate_ASGN1_4
	MOVI           	0x36
	SECTION        	0x1
	MOVA           	(_hw2000b_read_regDATA+0X0) & 0X7F		; Bank 1
;  104:(     CALLR, (hw2000b_read_reg.0) ,            ,       reg)

; ITemplate_CALL
	SEGMENTSEL     	_hw2000b_read_reg
	CALL           	_hw2000b_read_reg		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
	MOVAR          	_main_reg_65		; Bank 1
	MOV            	(?_TMP+0x1) & 0X7F,	0x0		; Bank 0
	MOVAR          	_main_reg_65+0x1		; Bank 1
#line 105	D:\毕业论文\ES_DEV_ES7W8020_SDK_YJ_FB_V4_20231013\src\main.c ; 		if ((reg & 0x2000) == 0)
;  105:(     JNZ_B,        reg ,         13 ,   #L20427)

; ITemplate_JNZ_B1_TMP
	SECTION        	0x1
	JBC            	(_main_reg_65+0x1) & 0X7F,	0x5		; Bank 1
	GOTO           	#L20427
; 		{     
#line 107	D:\毕业论文\ES_DEV_ES7W8020_SDK_YJ_FB_V4_20231013\src\main.c ; 			hw2000b_read_fifo(0x32, rxbuf, 1);			//读取接收数据长度值
;  107:(    PARA_1,         50 ,            ,      addr)

; ITemplate_ASGN1_4
	MOVI           	0x32
	MOVA           	(_hw2000b_read_fifoDATA+0X0) & 0X7F		; Bank 1
;  107:(    PARA_2,  (rxbuf.0) ,            ,      data)

; ITemplate_ASGN1_4
	MOVI           	_rxbuf
	MOVA           	(_hw2000b_read_fifoDATA+0X1) & 0X7F		; Bank 1
	MOVI           	HIGH(_rxbuf)
	MOVA           	(_hw2000b_read_fifoDATA+0X1+0x1) & 0X7F		; Bank 1
;  107:(    PARA_1,          1 ,            ,    length)

; ITemplate_ASGN1_4
	MOVI           	0x1
	MOVA           	(_hw2000b_read_fifoDATA+0X3) & 0X7F		; Bank 1
;  107:(      CALL, (hw2000b_read_fifo.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_hw2000b_read_fifo
	CALL           	_hw2000b_read_fifo		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 109	D:\毕业论文\ES_DEV_ES7W8020_SDK_YJ_FB_V4_20231013\src\main.c ; 			hw2000b_read_fifo(0x32, data_rf, rxbuf[0]); //读取数据
;  109:(    PARA_1,         50 ,            ,      addr)

; ITemplate_ASGN1_4
	MOVI           	0x32
	MOVAR          	_hw2000b_read_fifoDATA+0X0		; Bank 1
;  109:(    PARA_2, (data_rf.0) ,            ,      data)

; ITemplate_ASGN1_4
	MOVI           	_data_rf
	MOVAR          	_hw2000b_read_fifoDATA+0X1		; Bank 1
	MOVI           	HIGH(_data_rf)
	MOVAR          	_hw2000b_read_fifoDATA+0X1+0x1		; Bank 1
;  109:(    PARA_1, *(rxbuf.0) ,            ,    length)

; ITemplate_ASGN1_4
	MOVRA          	_rxbuf		; Bank 1
	MOVAR          	_hw2000b_read_fifoDATA+0X3		; Bank 1
;  109:(      CALL, (hw2000b_read_fifo.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_hw2000b_read_fifo
	CALL           	_hw2000b_read_fifo		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 111	D:\毕业论文\ES_DEV_ES7W8020_SDK_YJ_FB_V4_20231013\src\main.c ; 			for (i = 0; i<rxbuf[0]; i++)				//根据数据长度循环发送
;  111:(    ASGN_1,          0 ,            ,         i)

; ITemplate_CLR1_4_TMP
	SECTION        	0x1
	CLR            	(_main_i_65) & 0X7F		; Bank 1
;  111:(     LABEL,    #L20469 ,            ,          )

; ITemplate_LABEL
#L20469
;  111:(    JGE_1U,          i , *(rxbuf.0) ,   #L20535)

; ITemplate_JGE1_4U
	MOV            	(_rxbuf) & 0X7F,	0x0		; Bank 1
	SUB            	(_main_i_65) & 0X7F,	0x0		; Bank 1
	JBC            	PSW,	0x0
	GOTO           	#L20535
; 			{
#line 113	D:\毕业论文\ES_DEV_ES7W8020_SDK_YJ_FB_V4_20231013\src\main.c ; 				while (!TRMT0);
;  113:(     LABEL,    #L20495 ,            ,          )

; ITemplate_LABEL
#L20495
;  113:(      JZ_0,      TRMT0 ,            ,   #L20495)

; ITemplate_JZ_0
	BSS            	BKSR,	0x4
	JBS            	(_TRMT0_0#sh)/8,	(_TRMT0_0#sh)%8		; ShBank 1
	GOTO           	#L20495
#line 114	D:\毕业论文\ES_DEV_ES7W8020_SDK_YJ_FB_V4_20231013\src\main.c ; 				TX0B = data_rf[i];						//串口发送数据
;  114:(   CVUC_UI,          i ,            ,   #T20517)

; ITemplate_CVTMS_U
	CLR            	(_main_#T20517_70+0x1) & 0X7F		; Bank 1
	MOV            	(_main_i_65) & 0X7F,	0x0		; Bank 1
	MOVA           	(_main_#T20517_70) & 0X7F		; Bank 1
;  114:(     ADD_2,    #T20517 , (data_rf.0) ,   #T20518)

; ITemplate_ADD1_4
	MOV            	(_main_#T20517_70) & 0X7F,	0x0		; Bank 1
	ADDI           	_data_rf
	MOVA           	(_main_#T20518_70) & 0X7F		; Bank 1
	MOV            	(_main_#T20517_70+0x1) & 0X7F,	0x0		; Bank 1
	ADDCI          	HIGH(_data_rf)
	MOVA           	(_main_#T20518_70+0x1) & 0X7F		; Bank 1
;  114:(    ASGN_1,   *#T20518 ,            ,      TX0B)

; ITemplate_GetRamRef
	MOV            	(_main_#T20518_70+0x1) & 0X7F,	0x0		; Bank 1
	MOVA           	IAAH
	MOV            	(_main_#T20518_70) & 0X7F,	0x0		; Bank 1
	MOVA           	IAAL
	MOV            	IAD,	0x0
	MOVAR          	?_TMP		; Bank 0
; ITemplate_ASGN1_4
	MOVRA          	?_TMP		; Bank 0
	MOVA           	_TX0B_0#sh		; ShBank 1
;  111:(     ADD_1,          i ,          1 ,         i)

; ITemplate_INC_1_TMP
	INC            	(_main_i_65) & 0X7F		; Bank 1
#line 115	D:\毕业论文\ES_DEV_ES7W8020_SDK_YJ_FB_V4_20231013\src\main.c ; 			}
;  115:(       JMP,            ,            ,   #L20469)

; ITemplate_JMP
	GOTO           	#L20469
#line 116	D:\毕业论文\ES_DEV_ES7W8020_SDK_YJ_FB_V4_20231013\src\main.c ; 			while (!TRMT0);								//等待发送完成
;  116:(     LABEL,    #L20535 ,            ,          )

; ITemplate_LABEL
#L20535
;  116:(      JZ_0,      TRMT0 ,            ,   #L20535)

; ITemplate_JZ_0
	BSS            	BKSR,	0x4
	JBS            	(_TRMT0_0#sh)/8,	(_TRMT0_0#sh)%8		; ShBank 1
	GOTO           	#L20535
#line 118	D:\毕业论文\ES_DEV_ES7W8020_SDK_YJ_FB_V4_20231013\src\main.c ; 		}
;  118:(     LABEL,    #L20427 ,            ,          )

; ITemplate_LABEL
#L20427
#line 120	D:\毕业论文\ES_DEV_ES7W8020_SDK_YJ_FB_V4_20231013\src\main.c ; 		hw2000b_write_reg(0x21, 0x0000);				//TX/RX disable
;  120:(    PARA_1,         33 ,            ,      addr)

; ITemplate_ASGN1_4
	MOVI           	0x21
	MOVA           	(_hw2000b_write_regDATA+0X0) & 0X7F		; Bank 1
;  120:(    PARA_2,          0 ,            ,     value)

; ITemplate_ASGN1_4
	MOVI           	0x0
	MOVA           	(_hw2000b_write_regDATA+0X1) & 0X7F		; Bank 1
	MOVI           	0x0
	MOVA           	(_hw2000b_write_regDATA+0X1+0x1) & 0X7F		; Bank 1
;  120:(      CALL, (hw2000b_write_reg.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_hw2000b_write_reg
	CALL           	_hw2000b_write_reg		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 121	D:\毕业论文\ES_DEV_ES7W8020_SDK_YJ_FB_V4_20231013\src\main.c ; 		hw2000b_write_reg(0x23, 0x431B);				//复位RF电路
;  121:(    PARA_1,         35 ,            ,      addr)

; ITemplate_ASGN1_4
	MOVI           	0x23
	MOVAR          	_hw2000b_write_regDATA+0X0		; Bank 1
;  121:(    PARA_2,      17179 ,            ,     value)

; ITemplate_ASGN1_4
	MOVI           	0x1b
	MOVAR          	_hw2000b_write_regDATA+0X1		; Bank 1
	MOVI           	0x43
	MOVAR          	_hw2000b_write_regDATA+0X1+0x1		; Bank 1
;  121:(      CALL, (hw2000b_write_reg.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_hw2000b_write_reg
	CALL           	_hw2000b_write_reg		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 122	D:\毕业论文\ES_DEV_ES7W8020_SDK_YJ_FB_V4_20231013\src\main.c ; 		hw2000b_write_reg(0x23, 0x031B); 
;  122:(    PARA_1,         35 ,            ,      addr)

; ITemplate_ASGN1_4
	MOVI           	0x23
	MOVAR          	_hw2000b_write_regDATA+0X0		; Bank 1
;  122:(    PARA_2,        795 ,            ,     value)

; ITemplate_ASGN1_4
	MOVI           	0x1b
	MOVAR          	_hw2000b_write_regDATA+0X1		; Bank 1
	MOVI           	0x3
	MOVAR          	_hw2000b_write_regDATA+0X1+0x1		; Bank 1
;  122:(      CALL, (hw2000b_write_reg.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_hw2000b_write_reg
	CALL           	_hw2000b_write_reg		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 124	D:\毕业论文\ES_DEV_ES7W8020_SDK_YJ_FB_V4_20231013\src\main.c ;         CLRWDT();										//清看门狗
; ITemplate_LABEL
;-----------Embedded Asm--------------
	CWDT
;-------------------------------------
#line 125	D:\毕业论文\ES_DEV_ES7W8020_SDK_YJ_FB_V4_20231013\src\main.c ; 	}
;  125:(       JMP,            ,            ,   #L20371)

; ITemplate_JMP
	GOTO           	#L20371
	_DESC          	##isr,0X0,0X0
; interrupt fun entry
	PUBLIC         	SAVED_TMP
SECTION0_INT_SAVED_00	UNINTIAL       		; Bank 0
SAVED_FSR	RSEG           	0x3
SECTION0_INT_SAVED_3	UNINTIAL       		; Bank 0
SAVED_TMP	RSEG           	0x1
INT_ENTRY	CSEG           	0x04
; ITemplate_InterruptPackedConstHead
_INT_ENTRY
	PUSH           	
	CLR            	PCRH
	CLR            	BKSR
	MOV            	IAAL,	0x0
	MOVA           	(SAVED_FSR) & 0X7F		; Bank 0
	MOV            	IAAH,	0x0
	MOVA           	(SAVED_FSR+0x1) & 0X7F		; Bank 0
	MOV            	(CSEG_PTR) & 0X7F,	0x0		; Bank 0
	MOVA           	(CSEG_PTR+0x2) & 0X7F		; Bank 0
	MOV            	(CSEG_PTR+0x1) & 0X7F,	0x0		; Bank 0
	MOVA           	(CSEG_PTR+0x3) & 0X7F		; Bank 0
	MOV            	FRAL,	0x0
	MOVA           	(CSEG_PTR+0x4) & 0X7F		; Bank 0
	MOV            	FRAH,	0x0
	MOVA           	(CSEG_PTR+0x5) & 0X7F		; Bank 0
	MOV            	(MUL_TEMP) & 0X7F,	0x0		; Bank 0
	MOVA           	(MUL_TEMP+0x2) & 0X7F		; Bank 0
	MOV            	(MUL_TEMP+0x1) & 0X7F,	0x0		; Bank 0
	MOVA           	(MUL_TEMP+0x3) & 0X7F		; Bank 0
isr#	CSEG           
_isr
; }
; /**************************************************************************
; * 函数名称：isr
; * 功能描述：中断入口函数
; * 输入参数：无
; * 返回参数：无
; * 函数作者：
; * 完成日期：
; * 修订历史：
; * 修订日期：
; **************************************************************************/
; void isr(void) interrupt
; {
#line 140	D:\毕业论文\ES_DEV_ES7W8020_SDK_YJ_FB_V4_20231013\src\main.c ; 	if(KIE && KMSK4 && KIF)
;  140:(      JZ_0,        KIE ,            ,   #L20587)

; ITemplate_JZ_0
	JBS            	(_KIE_0)/8,	(_KIE_0)%8
	GOTO           	#L20587
;  140:(      JZ_0,      KMSK4 ,            ,   #L20587)

; ITemplate_JZ_0
	JBS            	(_KMSK4_0)/8,	(_KMSK4_0)%8
	GOTO           	#L20587
;  140:(      JZ_0,        KIF ,            ,   #L20587)

; ITemplate_JZ_0
	JBS            	(_KIF_0)/8,	(_KIF_0)%8
	GOTO           	#L20587
;     {
#line 142	D:\毕业论文\ES_DEV_ES7W8020_SDK_YJ_FB_V4_20231013\src\main.c ; 		KIF = 0;       //清除外部中断
;  142:(    ASGN_0,          0 ,            ,       KIF)

; ITemplate_CLR_0_TMP
	BCC            	(_KIF_0)/8,	(_KIF_0)%8
#line 143	D:\毕业论文\ES_DEV_ES7W8020_SDK_YJ_FB_V4_20231013\src\main.c ; 		if(IRQ)
;  143:(      JZ_0,        PB3 ,            ,   #L20587)

; ITemplate_JZ_0
	JBS            	(_PB3_0)/8,	(_PB3_0)%8
	GOTO           	#L20587
; 		{
#line 145	D:\毕业论文\ES_DEV_ES7W8020_SDK_YJ_FB_V4_20231013\src\main.c ; 			_hw2000b_irq_request = 1;
;  145:(    ASGN_0,          1 ,            ,_hw2000b_irq_request)

; ITemplate_SET_0_TMP
	BSS            	((__hw2000b_irq_request)/8) & 0X7F,	(__hw2000b_irq_request)%8		; Bank 0
; 		}
;     }
#line 149	D:\毕业论文\ES_DEV_ES7W8020_SDK_YJ_FB_V4_20231013\src\main.c ; }
;  149:(     LABEL,    #L20587 ,            ,          )

; ITemplate_LABEL
#L20587
;  149:(     RET_I,            ,            ,          )

; ITemplate_RET_I
	GOTO           	_INT_RESTORE		; Bank 0		; ShBank 0
; interrupt fun restore
INT_RESTORE	CSEG           
; ITemplate_InterruptPackedConstTail
_INT_RESTORE
	NOP            	
	NOP            	
	MOV            	(CSEG_PTR+0x3) & 0X7F,	0x0		; Bank 0
	MOVA           	(CSEG_PTR+0x1) & 0X7F		; Bank 0
	MOV            	(CSEG_PTR+0x2) & 0X7F,	0x0		; Bank 0
	MOVA           	(CSEG_PTR) & 0X7F		; Bank 0
	MOV            	(MUL_TEMP+0x2) & 0X7F,	0x0		; Bank 0
	MOVA           	(MUL_TEMP) & 0X7F		; Bank 0
	MOVA           	MULA
	MOV            	(MUL_TEMP+0x3) & 0X7F,	0x0		; Bank 0
	MOVA           	(MUL_TEMP+0x1) & 0X7F		; Bank 0
	MOVA           	MULB
	MOV            	(SAVED_FSR+0x1) & 0X7F,	0x0		; Bank 0
	MOVA           	IAAH
	MOV            	(SAVED_FSR) & 0X7F,	0x0		; Bank 0
	MOVA           	IAAL
	MOV            	(CSEG_PTR+0x5) & 0X7F,	0x0		; Bank 0
	MOVA           	FRAH
	MOV            	(CSEG_PTR+0x4) & 0X7F,	0x0		; Bank 0
	MOVA           	FRAL
	TBR            	
	POP            	
	RETIE          	

SECTION0C__Program_Files__x86__HRCC_Tools_HRCC_v1_2_0_139_tools_INCLUDE_ES7P0693_h_STATIC4	UNINTIAL       		; Bank 0
_#T0	RSEG           	0X1		; Bank 0

SECTION8D__毕业论文_ES_DEV_ES7W8020_SDK_YJ_FB_V4_20231013_src_main_c_STATIC5	PSECT	FLAG=0X1088,ADDR=0X7FCB7
_GIE_0	RSEG           	0X1		; Bank 0

SECTION8D__毕业论文_ES_DEV_ES7W8020_SDK_YJ_FB_V4_20231013_src_main_c_STATIC6	PSECT	FLAG=0X1088,ADDR=0X7FCCC
_KIE_0	RSEG           	0X1		; Bank 0

SECTION8D__毕业论文_ES_DEV_ES7W8020_SDK_YJ_FB_V4_20231013_src_main_c_STATIC7	PSECT	FLAG=0X1088,ADDR=0X7FCD4
_KIF_0	RSEG           	0X1		; Bank 0

SECTION8D__毕业论文_ES_DEV_ES7W8020_SDK_YJ_FB_V4_20231013_src_main_c_STATIC8	PSECT	FLAG=0X1088,ADDR=0X7FD1C
_KMSK4_0	RSEG           	0X1		; Bank 0

SECTION8D__毕业论文_ES_DEV_ES7W8020_SDK_YJ_FB_V4_20231013_src_main_c_STATIC9	PSECT	FLAG=0X1088,ADDR=0X7FD4B
_PB3_0	RSEG           	0X1		; Bank 0

SECTION8D__毕业论文_ES_DEV_ES7W8020_SDK_YJ_FB_V4_20231013_src_main_c_STATIC10	PSECT	FLAG=0X1088,ADDR=0X30684
_RX0TXEN_0	RSEG           	0X1		; Bank 0

SECTION8D__毕业论文_ES_DEV_ES7W8020_SDK_YJ_FB_V4_20231013_src_main_c_STATIC11	PSECT	FLAG=0X1088,ADDR=0X30686
_RX0LEN_0	RSEG           	0X1		; Bank 0

SECTION8D__毕业论文_ES_DEV_ES7W8020_SDK_YJ_FB_V4_20231013_src_main_c_STATIC12	PSECT	FLAG=0X1088,ADDR=0X30691
_TRMT0_0	RSEG           	0X1		; Bank 0

SECTION8D__毕业论文_ES_DEV_ES7W8020_SDK_YJ_FB_V4_20231013_src_main_c_STATIC13	PSECT	FLAG=0X1088,ADDR=0X30695
_BRGH0_0	RSEG           	0X1		; Bank 0

SECTION8D__毕业论文_ES_DEV_ES7W8020_SDK_YJ_FB_V4_20231013_src_main_c_STATIC14	PSECT	FLAG=0X1088,ADDR=0X30696
_TX0LEN_0	RSEG           	0X1		; Bank 0

SECTION8D__毕业论文_ES_DEV_ES7W8020_SDK_YJ_FB_V4_20231013_src_main_c_STATIC15	PSECT	FLAG=0X1088,ADDR=0X30697
_TX0EN_0	RSEG           	0X1		; Bank 0

SECTION0D__毕业论文_ES_DEV_ES7W8020_SDK_YJ_FB_V4_20231013_src_main_c_STATIC16	PSECT	FLAG=0x88
__hw2000b_irq_request	RSEG           	0X1		; Bank 0

SECTION0D__毕业论文_ES_DEV_ES7W8020_SDK_YJ_FB_V4_20231013_src_main_c_STATIC17	PSECT	FLAG=0x88
_rx_ok	RSEG           	0X1		; Bank 0

SECTION0D__毕业论文_ES_DEV_ES7W8020_SDK_YJ_FB_V4_20231013_src_main_c_STATIC18	UNINTIAL       		; Bank 0
_rxbuf_cnt	RSEG           	0X1		; Bank 0

SECTION0D__毕业论文_ES_DEV_ES7W8020_SDK_YJ_FB_V4_20231013_src_main_c_STATIC19	UNINTIAL       		; Bank 0
_rxbuf_crc	RSEG           	0X1		; Bank 0

SECTION1D__毕业论文_ES_DEV_ES7W8020_SDK_YJ_FB_V4_20231013_src_main_c_STATIC	UNINTIAL       	0		; Bank 0
	ORG            	0X90		; Bank 0
__ack_count	RSEG           	0X2		; Bank 0
	ORG            	0X98		; Bank 0
_data_rf	RSEG           	0X1E		; Bank 0
	ORG            	0XB6		; Bank 0
_rxbuf	RSEG           	0X1E		; Bank 0

SECTION8C__Program_Files__x86__HRCC_Tools_HRCC_v1_2_0_139_tools_INCLUDE_ES7P0693_h_STATIC	UNINTIAL       	0		; Bank 0
	ORG            	0XFFA4		; Bank 0
_WDTC_0	RSEG           	0X1		; Bank 0
	ORG            	0XFFA7		; Bank 0
_PWEN_0	RSEG           	0X1		; Bank 0
	ORG            	0X60D1		; Bank 0
_TX0B_0	RSEG           	0X1		; Bank 0
	ORG            	0X60D3		; Bank 0
_BR0R_0	RSEG           	0X1		; Bank 0
	END

